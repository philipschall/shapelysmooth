[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "pybind11>=2.10",
  "setuptools",
  "wheel",
]

[project]
name = "shapelysmooth"
version = "0.1.1"
description = "A polyline smoothing package for shapely."
readme = { file = "README.md", content-type = "text/markdown" }
license = { text = "Unlicense" }
authors = [{ name = "Philip Schall", email = "philip.schall@live.com" }]
requires-python = ">=3.6"
classifiers = [
  'Development Status :: 3 - Alpha',
  'Intended Audience :: Developers',
  'License :: Public Domain',
  'Operating System :: MacOS',
  'Operating System :: Microsoft :: Windows',
  'Operating System :: Unix',
  'Programming Language :: C++',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.6',
  'Programming Language :: Python :: 3.7',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  "Programming Language :: Python :: 3.12",
  'Programming Language :: Python :: Implementation :: CPython',
  'Programming Language :: Python :: Implementation :: PyPy',
  'Topic :: Scientific/Engineering :: Mathematics',
]
dependencies = [
  "shapely",
]
[project.optional-dependencies]
dev = [
  "nox",
  "pre-commit",
  "pybind11",
]
test = [
  "coverage[toml]",
  "pytest-sugar",
]
[project.urls]
Homepage = "https://github.com/philipschall/shapelysmooth"

[tool.setuptools]
include-package-data = true
license-files = ["LICENSE.txt"]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
shapelysmooth = ["py.typed"]

[tool.setuptools.packages]
find = {namespaces = false}

[tool.ruff]
target-version = 'py39'
lint.select = [
    # flake8-bugbear
    "B",
    # flake8-comprehensions
    "C4",
    # pydocstyle
    "D",
    # Error
    "E",
    # pyflakes
    "F",
    # isort
    "I",
    # flake8-implicit-str-concat
    "ISC",
    # pep8-naming
    "N",
    # pygrep-hooks
    "PGH",
    # flake8-pytest-style
    "PT",
    # flake8-use-pathlib
    "PTH",
    # flake8-quotes
    "Q",
    # flake8-simplify
    "SIM",
    # flake8-print
    "T20",
    # tryceratops
    "TRY",
    # pyupgrade
    "UP",
    # Warning
    "W",
    # flake8-2020
    "YTT",
    # flake8-debugger
    "T10",
    # flake8-gettext
    "INT",
    # pylint
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    # misc lints
    "PIE",
    # flake8-pyi
    "PYI",
    # tidy imports
    "TID",
    # type-checking imports
    "TCH",
    # Ruff-specific rules
    "RUF",
]

exclude = [
    "__pycache__",
    ".nox",
    "setup.py",
]

lint.ignore = [
    "D103",
    "D105",
    "E501",
    "PLR2004",
    "PLR0913",
    # conflict with run-formatter
    "ISC001",
]
lint.extend-safe-fixes = [
    # absolute imports
    "TID252",
]
line-length = 100

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    # use of "assert"
    "S101",
    # Mutable class attributes
    "RUF012",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = [
  "shapelysmooth",
]

[tool.pytest.ini_options]
addopts = "--strict-config --capture=no --durations=5"
doctest_optionflags = [
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
  "ELLIPSIS",
  "NUMBER",
]
junit_family = "xunit2"
testpaths = [
  "tests",
  "shapelysmooth"
]

[tool.coverage.report]
ignore_errors = false
show_missing = true
exclude_lines = [
  "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
include = ["shapelysmooth/__init__.py"]

[tool.pyright]
include = ["shapelysmooth"]
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryIsInstance = false
typeCheckingMode = "strict"
